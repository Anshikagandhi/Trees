// Following is the given TreeNode structure.
/**************

template <typename T>
class TreeNode {
public:
    T data;
    vector<TreeNode<T>*> children;
    
    TreeNode(T data) {
        this->data = data;
    }
    
    ~TreeNode() {
        for (int i = 0; i < children.size(); i++) {
            delete children[i];
        }
    }
    
};
***************/
#include<queue>

void printLevelWise(TreeNode<int>* root) {
    /* Don't write main().
     * Don't read input, it is passed as function argument.
     * Print output as specified in the question.
     */
    queue<TreeNode<int>*>q;
 	q.push(root);
  while(!q.empty())
  {

    TreeNode<int> *current=q.front();
    cout<<current->data<<":";
    q.pop();
    
    for(int i=0;i<current->children.size();i++)
    {
      cout<<current->children[i]->data;
      if(i!=current->children.size()-1)
        cout<<",";
      q.push(current -> children[i]);
    }
    cout<<endl;

  }
}
